From fd4f205e5986b6f1711a56f18b30bc3b29092f25 Mon Sep 17 00:00:00 2001
From: Chris Sanders <zidane@outlook.com>
Date: Sat, 22 Dec 2012 01:10:05 -0600
Subject: [PATCH] (Almura) Core Changes

- Reverts commit 203de4180b40f069d2c175d763476bd4ce338c76.
- Exposes server to PluginLoader

diff --git a/src/main/java/org/bukkit/plugin/java/JavaPluginLoader.java b/src/main/java/org/bukkit/plugin/java/JavaPluginLoader.java
index d905435..2f000d9 100644
--- a/src/main/java/org/bukkit/plugin/java/JavaPluginLoader.java
+++ b/src/main/java/org/bukkit/plugin/java/JavaPluginLoader.java
@@ -15,6 +15,7 @@ import java.util.LinkedHashMap;
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
+import java.util.concurrent.ConcurrentHashMap;
 import java.util.jar.JarEntry;
 import java.util.jar.JarFile;
 import java.util.logging.Level;
@@ -50,43 +51,13 @@ import com.google.common.collect.ImmutableList;
  * Represents a Java plugin loader, allowing plugins in the form of .jar
  */
 public class JavaPluginLoader implements PluginLoader {
-    final Server server;
-    final boolean extended = this.getClass() != JavaPluginLoader.class;
-    boolean warn;
-
-    private final Pattern[] fileFilters0 = new Pattern[] { Pattern.compile("\\.jar$"), };
-    /**
-     * @deprecated Internal field that wasn't intended to be exposed
-     */
-    @Deprecated
-    protected final Pattern[] fileFilters = fileFilters0;
-
-    private final Map<String, Class<?>> classes0 = new HashMap<String, Class<?>>();
-    /**
-     * @deprecated Internal field that wasn't intended to be exposed
-     */
-    @Deprecated
-    protected final Map<String, Class<?>> classes = classes0;
-
-    private final Map<String, PluginClassLoader> loaders0 = new LinkedHashMap<String, PluginClassLoader>();
-    /**
-     * @deprecated Internal field that wasn't intended to be exposed
-     */
-    @Deprecated
-    protected final Map<String, PluginClassLoader> loaders = loaders0;
-
-    /**
-     * This class was not meant to be extended
-     */
-    @Deprecated
+    protected final Server server;
+    protected final Pattern[] fileFilters = new Pattern[] { Pattern.compile("\\.jar$"), };
+    protected final Map<String, Class<?>> classes = new ConcurrentHashMap<String, Class<?>>();
+    protected final Map<String, PluginClassLoader> loaders = new LinkedHashMap<String, PluginClassLoader>();
+
     public JavaPluginLoader(Server instance) {
-        Validate.notNull(instance, "Server cannot be null");
         server = instance;
-        warn = instance.getWarningState() != WarningState.OFF;
-        if (extended && warn) {
-            warn = false;
-            instance.getLogger().log(Level.WARNING, "JavaPluginLoader not intended to be extended by " + getClass() + ", and may be final in a future version of Bukkit");
-        }
     }
 
     public Plugin loadPlugin(File file) throws InvalidPluginException {
@@ -104,7 +75,7 @@ public class JavaPluginLoader implements PluginLoader {
         }
 
         File dataFolder = new File(file.getParentFile(), description.getName());
-        File oldDataFolder = extended ? getDataFolder(file) : getDataFolder0(file); // Don't warn on deprecation, but maintain overridability
+        File oldDataFolder = getDataFolder(file);
 
         // Found old data folder
         if (dataFolder.equals(oldDataFolder)) {
@@ -145,10 +116,10 @@ public class JavaPluginLoader implements PluginLoader {
         }
 
         for (String pluginName : depend) {
-            if (loaders0 == null) {
+            if (loaders == null) {
                 throw new UnknownDependencyException(pluginName);
             }
-            PluginClassLoader current = loaders0.get(pluginName);
+            PluginClassLoader current = loaders.get(pluginName);
 
             if (current == null) {
                 throw new UnknownDependencyException(pluginName);
@@ -164,10 +135,10 @@ public class JavaPluginLoader implements PluginLoader {
             urls[0] = file.toURI().toURL();
 
             if (description.getClassLoaderOf() != null) {
-                loader = loaders0.get(description.getClassLoaderOf());
+                loader = loaders.get(description.getClassLoaderOf());
                 loader.addURL(urls[0]);
             } else {
-                loader = new PluginClassLoader(this, urls, getClass().getClassLoader(), null);
+                loader = new PluginClassLoader(this, urls, getClass().getClassLoader());
             }
 
             Class<?> jarClass = Class.forName(description.getMain(), true, loader);
@@ -184,36 +155,16 @@ public class JavaPluginLoader implements PluginLoader {
             throw new InvalidPluginException(ex);
         }
 
-        loaders0.put(description.getName(), loader);
+        loaders.put(description.getName(), loader);
 
         return result;
     }
 
-    /**
-     * @deprecated Relic method from PluginLoader that didn't get purged
-     */
-    @Deprecated
     public Plugin loadPlugin(File file, boolean ignoreSoftDependencies) throws InvalidPluginException {
-        if (warn) {
-            server.getLogger().log(Level.WARNING, "Method \"public Plugin loadPlugin(File, boolean)\" is Deprecated, and may be removed in a future version of Bukkit", new AuthorNagException(""));
-            warn = false;
-        }
         return loadPlugin(file);
     }
 
-    /**
-     * @deprecated Internal method that wasn't intended to be exposed
-     */
-    @Deprecated
     protected File getDataFolder(File file) {
-        if (warn) {
-            server.getLogger().log(Level.WARNING, "Method \"protected File getDataFolder(File)\" is Deprecated, and may be removed in a future version of Bukkit", new AuthorNagException(""));
-            warn = false;
-        }
-        return getDataFolder0(file);
-    }
-
-    private File getDataFolder0(File file) {
         File dataFolder = null;
 
         String filename = file.getName();
@@ -272,32 +223,20 @@ public class JavaPluginLoader implements PluginLoader {
     }
 
     public Pattern[] getPluginFileFilters() {
-        return fileFilters0.clone();
+        return fileFilters;
     }
 
-    /**
-     * @deprecated Internal method that wasn't intended to be exposed
-     */
-    @Deprecated
     public Class<?> getClassByName(final String name) {
-        if (warn) {
-            server.getLogger().log(Level.WARNING, "Method \"public Class<?> getClassByName(String)\" is Deprecated, and may be removed in a future version of Bukkit", new AuthorNagException(""));
-            warn = false;
-        }
-        return getClassByName0(name);
-    }
-
-    Class<?> getClassByName0(final String name) {
-        Class<?> cachedClass = classes0.get(name);
+        Class<?> cachedClass = classes.get(name);
 
         if (cachedClass != null) {
             return cachedClass;
         } else {
-            for (String current : loaders0.keySet()) {
-                PluginClassLoader loader = loaders0.get(current);
+            for (String current : loaders.keySet()) {
+                PluginClassLoader loader = loaders.get(current);
 
                 try {
-                    cachedClass = loader.extended ? loader.findClass(name, false) : loader.findClass0(name, false); // Don't warn on deprecation, but maintain overridability
+                    cachedClass = loader.findClass(name, false);
                 } catch (ClassNotFoundException cnfe) {}
                 if (cachedClass != null) {
                     return cachedClass;
@@ -307,21 +246,9 @@ public class JavaPluginLoader implements PluginLoader {
         return null;
     }
 
-    /**
-     * @deprecated Internal method that wasn't intended to be exposed
-     */
-    @Deprecated
     public void setClass(final String name, final Class<?> clazz) {
-        if (warn) {
-            server.getLogger().log(Level.WARNING, "Method \"public void setClass(String, Class<?>)\" is Deprecated, and may be removed in a future version of Bukkit", new AuthorNagException(""));
-            warn = false;
-        }
-        setClass0(name, clazz);
-    }
-
-    void setClass0(final String name, final Class<?> clazz) {
-        if (!classes0.containsKey(name)) {
-            classes0.put(name, clazz);
+        if (!classes.containsKey(name)) {
+            classes.put(name, clazz);
 
             if (ConfigurationSerializable.class.isAssignableFrom(clazz)) {
                 Class<? extends ConfigurationSerializable> serializable = clazz.asSubclass(ConfigurationSerializable.class);
@@ -330,20 +257,8 @@ public class JavaPluginLoader implements PluginLoader {
         }
     }
 
-    /**
-     * @deprecated Internal method that wasn't intended to be exposed
-     */
-    @Deprecated
     public void removeClass(String name) {
-        if (warn) {
-            server.getLogger().log(Level.WARNING, "Method \"public void removeClass(String)\" is Deprecated, and may be removed in a future version of Bukkit", new AuthorNagException(""));
-            warn = false;
-        }
-        removeClass0(name);
-    }
-
-    private void removeClass0(String name) {
-        Class<?> clazz = classes0.remove(name);
+        Class<?> clazz = classes.remove(name);
 
         try {
             if ((clazz != null) && (ConfigurationSerializable.class.isAssignableFrom(clazz))) {
@@ -440,17 +355,20 @@ public class JavaPluginLoader implements PluginLoader {
     }
 
     public void enablePlugin(final Plugin plugin) {
-        Validate.isTrue(plugin instanceof JavaPlugin, "Plugin is not associated with this PluginLoader");
+        if (!(plugin instanceof JavaPlugin)) {
+            throw new IllegalArgumentException("Plugin is not associated with this PluginLoader");
+        }
 
         if (!plugin.isEnabled()) {
-            plugin.getLogger().info("Enabling " + plugin.getDescription().getFullName());
+            String message = String.format("Enabling %s", plugin.getDescription().getFullName());
+            plugin.getLogger().info(message);
 
             JavaPlugin jPlugin = (JavaPlugin) plugin;
 
             String pluginName = jPlugin.getDescription().getName();
 
-            if (!loaders0.containsKey(pluginName)) {
-                loaders0.put(pluginName, (PluginClassLoader) jPlugin.getClassLoader());
+            if (!loaders.containsKey(pluginName)) {
+                loaders.put(pluginName, (PluginClassLoader) jPlugin.getClassLoader());
             }
 
             try {
@@ -466,7 +384,9 @@ public class JavaPluginLoader implements PluginLoader {
     }
 
     public void disablePlugin(Plugin plugin) {
-        Validate.isTrue(plugin instanceof JavaPlugin, "Plugin is not associated with this PluginLoader");
+        if (!(plugin instanceof JavaPlugin)) {
+            throw new IllegalArgumentException("Plugin is not associated with this PluginLoader");
+        }
 
         if (plugin.isEnabled()) {
             String message = String.format("Disabling %s", plugin.getDescription().getFullName());
@@ -483,18 +403,14 @@ public class JavaPluginLoader implements PluginLoader {
                 server.getLogger().log(Level.SEVERE, "Error occurred while disabling " + plugin.getDescription().getFullName() + " (Is it up to date?)", ex);
             }
 
-            loaders0.remove(jPlugin.getDescription().getName());
+            loaders.remove(jPlugin.getDescription().getName());
 
             if (cloader instanceof PluginClassLoader) {
                 PluginClassLoader loader = (PluginClassLoader) cloader;
-                Set<String> names = loader.extended ? loader.getClasses() : loader.getClasses0(); // Don't warn on deprecation, but maintain overridability
+                Set<String> names = loader.getClasses();
 
                 for (String name : names) {
-                    if (extended) {
-                        removeClass(name);
-                    } else {
-                        removeClass0(name);
-                    }
+                    removeClass(name);
                 }
             }
         }
diff --git a/src/main/java/org/bukkit/plugin/java/PluginClassLoader.java b/src/main/java/org/bukkit/plugin/java/PluginClassLoader.java
index 29ec3fc..3e26e75 100644
--- a/src/main/java/org/bukkit/plugin/java/PluginClassLoader.java
+++ b/src/main/java/org/bukkit/plugin/java/PluginClassLoader.java
@@ -5,10 +5,6 @@ import java.net.URLClassLoader;
 import java.util.HashMap;
 import java.util.Map;
 import java.util.Set;
-import java.util.logging.Level;
-
-import org.apache.commons.lang.Validate;
-import org.bukkit.plugin.AuthorNagException;
 
 /**
  * A ClassLoader for plugins, to allow shared classes across multiple plugins
@@ -16,29 +12,9 @@ import org.bukkit.plugin.AuthorNagException;
 public class PluginClassLoader extends URLClassLoader {
     private final JavaPluginLoader loader;
     private final Map<String, Class<?>> classes = new HashMap<String, Class<?>>();
-    final boolean extended = this.getClass() != PluginClassLoader.class;
 
-    /**
-     * Internal class not intended to be exposed
-     */
-    @Deprecated
     public PluginClassLoader(final JavaPluginLoader loader, final URL[] urls, final ClassLoader parent) {
-        this(loader, urls, parent, null);
-
-        if (loader.warn) {
-            if (extended) {
-                loader.server.getLogger().log(Level.WARNING, "PluginClassLoader not intended to be extended by " + getClass() + ", and may be final in a future version of Bukkit");
-            } else {
-                loader.server.getLogger().log(Level.WARNING, "Constructor \"public PluginClassLoader(JavaPluginLoader, URL[], ClassLoader)\" is Deprecated, and may be removed in a future version of Bukkit", new AuthorNagException(""));
-            }
-            loader.warn = false;
-        }
-    }
-
-
-    PluginClassLoader(final JavaPluginLoader loader, final URL[] urls, final ClassLoader parent, final Object methodSignature) {
         super(urls, parent);
-        Validate.notNull(loader, "Loader cannot be null");
 
         this.loader = loader;
     }
@@ -50,22 +26,10 @@ public class PluginClassLoader extends URLClassLoader {
 
     @Override
     protected Class<?> findClass(String name) throws ClassNotFoundException {
-        return extended ? findClass(name, true) : findClass0(name, true); // Don't warn on deprecation, but maintain overridability
+        return findClass(name, true);
     }
 
-    /**
-     * @deprecated Internal method that wasn't intended to be exposed
-     */
-    @Deprecated
     protected Class<?> findClass(String name, boolean checkGlobal) throws ClassNotFoundException {
-        if (loader.warn) {
-            loader.server.getLogger().log(Level.WARNING, "Method \"protected Class<?> findClass(String, boolean)\" is Deprecated, and may be removed in a future version of Bukkit", new AuthorNagException(""));
-            loader.warn = false;
-        }
-        return findClass0(name, checkGlobal);
-    }
-
-    Class<?> findClass0(String name, boolean checkGlobal) throws ClassNotFoundException {
         if (name.startsWith("org.bukkit.") || name.startsWith("net.minecraft.")) {
             throw new ClassNotFoundException(name);
         }
@@ -73,18 +37,14 @@ public class PluginClassLoader extends URLClassLoader {
 
         if (result == null) {
             if (checkGlobal) {
-                result = loader.extended ? loader.getClassByName(name) : loader.getClassByName0(name); // Don't warn on deprecation, but maintain overridability
+                result = loader.getClassByName(name);
             }
 
             if (result == null) {
                 result = super.findClass(name);
 
                 if (result != null) {
-                    if (loader.extended) { // Don't warn on deprecation, but maintain overridability
-                        loader.setClass(name, result);
-                    } else {
-                        loader.setClass0(name, result);
-                    }
+                    loader.setClass(name, result);
                 }
             }
 
@@ -94,19 +54,7 @@ public class PluginClassLoader extends URLClassLoader {
         return result;
     }
 
-    /**
-     * @deprecated Internal method that wasn't intended to be exposed
-     */
-    @Deprecated
     public Set<String> getClasses() {
-        if (loader.warn) {
-            loader.server.getLogger().log(Level.WARNING, "Method \"public Set<String> getClasses()\" is Deprecated, and may be removed in a future version of Bukkit", new AuthorNagException(""));
-            loader.warn = false;
-        }
-        return getClasses0();
-    }
-
-    Set<String> getClasses0() {
         return classes.keySet();
     }
 }
-- 
1.9.0.msysgit.0

